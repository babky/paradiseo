<?xml version='1.0' encoding='ISO-8859-1' standalone='yes'?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>Welcome to PARADISEO-Moving Objects</title>
    <filename>main</filename>
    <docanchor file="main">Paradiseo</docanchor>
    <docanchor file="main">authors</docanchor>
    <docanchor file="main">Introduction</docanchor>
    <docanchor file="main">LICENSE</docanchor>
    <docanchor file="main">Installation</docanchor>
  </compound>
  <compound kind="class">
    <name>moAlgo</name>
    <filename>classmo_algo.html</filename>
    <templarg>EOT</templarg>
    <base>eoMonOp&lt; EOT &gt;</base>
  </compound>
  <compound kind="class">
    <name>moAspirCrit</name>
    <filename>classmo_aspir_crit.html</filename>
    <templarg>M</templarg>
    <base>eoBF&lt; const M &amp;, const M::EOType::Fitness &amp;, bool &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moBestImprSelect</name>
    <filename>classmo_best_impr_select.html</filename>
    <templarg>M</templarg>
    <base>moMoveSelect</base>
    <member kind="typedef">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>(const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(const M &amp;_move, const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(M &amp;_move, Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>first_time</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M</type>
      <name>best_move</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>best_fitness</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moComparator</name>
    <filename>classmo_comparator.html</filename>
    <templarg>EOT</templarg>
    <base>eoBF&lt; const EOT &amp;, const EOT &amp;, bool &gt;</base>
  </compound>
  <compound kind="class">
    <name>moCoolingSchedule</name>
    <filename>classmo_cooling_schedule.html</filename>
    <base>eoUF&lt; double &amp;, bool &gt;</base>
  </compound>
  <compound kind="class">
    <name>moExponentialCoolingSchedule</name>
    <filename>classmo_exponential_cooling_schedule.html</filename>
    <base>moCoolingSchedule</base>
    <member kind="function">
      <type></type>
      <name>moExponentialCoolingSchedule</name>
      <anchor>a0</anchor>
      <arglist>(double _threshold, double _ratio)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(double &amp;_temperature)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>threshold</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ratio</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moFirstImprSelect</name>
    <filename>classmo_first_impr_select.html</filename>
    <templarg>M</templarg>
    <base>moMoveSelect</base>
    <member kind="typedef">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>(const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(const M &amp;_move, const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(M &amp;_move, Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>valid</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M</type>
      <name>best_move</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>initial_fitness</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>best_fitness</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moFitComparator</name>
    <filename>classmo_fit_comparator.html</filename>
    <templarg>EOT</templarg>
    <base>moComparator</base>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const EOT &amp;_solution1, const EOT &amp;_solution2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moFitSolContinue</name>
    <filename>classmo_fit_sol_continue.html</filename>
    <templarg>EOT</templarg>
    <base>moSolContinue</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moFitSolContinue</name>
      <anchor>a0</anchor>
      <arglist>(Fitness _fitness)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>fitness</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moGenSolContinue</name>
    <filename>classmo_gen_sol_continue.html</filename>
    <templarg>EOT</templarg>
    <base>moSolContinue</base>
    <member kind="function">
      <type></type>
      <name>moGenSolContinue</name>
      <anchor>a0</anchor>
      <arglist>(unsigned int _generationMaximumNumber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>generationMaximumNumber</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>generationNumber</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moHC</name>
    <filename>classmo_h_c.html</filename>
    <templarg>M</templarg>
    <base>moAlgo&lt; M::EOType &gt;</base>
    <member kind="function">
      <type></type>
      <name>moHC</name>
      <anchor>a0</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moMoveSelect&lt; M &gt; &amp;_move_selection, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moHC</name>
      <anchor>a1</anchor>
      <arglist>(moMoveExpl&lt; M &gt; &amp;_move_explorer, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EOT &amp;_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveExpl&lt; M &gt; &amp;</type>
      <name>move_explorer</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>full_evaluation</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moHCMoveLoopExpl</name>
    <filename>classmo_h_c_move_loop_expl.html</filename>
    <templarg>M</templarg>
    <base>moMoveLoopExpl</base>
    <member kind="function">
      <type></type>
      <name>moHCMoveLoopExpl</name>
      <anchor>a0</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moMoveSelect&lt; M &gt; &amp;_move_selection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const EOT &amp;_old_solution, EOT &amp;_new_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveInit&lt; M &gt; &amp;</type>
      <name>move_initializer</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moNextMove&lt; M &gt; &amp;</type>
      <name>next_move_generator</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveIncrEval&lt; M &gt; &amp;</type>
      <name>incremental_evaluation</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveSelect&lt; M &gt; &amp;</type>
      <name>move_selection</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moILS</name>
    <filename>classmo_i_l_s.html</filename>
    <templarg>M</templarg>
    <base>moAlgo&lt; M::EOType &gt;</base>
    <member kind="function">
      <type></type>
      <name>moILS</name>
      <anchor>a0</anchor>
      <arglist>(moAlgo&lt; EOT &gt; &amp;_algorithm, moSolContinue&lt; EOT &gt; &amp;_continue, moComparator&lt; EOT &gt; &amp;_acceptance_criterion, eoMonOp&lt; EOT &gt; &amp;_perturbation, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moILS</name>
      <anchor>a1</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moMoveSelect&lt; M &gt; &amp;_move_selection, moSolContinue&lt; EOT &gt; &amp;_continue, moComparator&lt; EOT &gt; &amp;_acceptance_criterion, eoMonOp&lt; EOT &gt; &amp;_perturbation, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moILS</name>
      <anchor>a2</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moTabuList&lt; M &gt; &amp;_tabu_list, moAspirCrit&lt; M &gt; &amp;_aspiration_criterion, moSolContinue&lt; EOT &gt; &amp;_moTS_continue, moSolContinue&lt; EOT &gt; &amp;_continue, moComparator&lt; EOT &gt; &amp;_acceptance_criterion, eoMonOp&lt; EOT &gt; &amp;_perturbation, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moILS</name>
      <anchor>a3</anchor>
      <arglist>(moRandMove&lt; M &gt; &amp;_random_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moSolContinue&lt; EOT &gt; &amp;_moSA_continue, double _initial_temperature, moCoolingSchedule &amp;_cooling_schedule, moSolContinue&lt; EOT &gt; &amp;_continue, moComparator&lt; EOT &gt; &amp;_acceptance_criterion, eoMonOp&lt; EOT &gt; &amp;_perturbation, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a4</anchor>
      <arglist>(EOT &amp;_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moAlgo&lt; EOT &gt; &amp;</type>
      <name>algorithm</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moSolContinue&lt; EOT &gt; &amp;</type>
      <name>continu</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moComparator&lt; EOT &gt; &amp;</type>
      <name>acceptance_criterion</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoMonOp&lt; EOT &gt; &amp;</type>
      <name>perturbation</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>full_evaluation</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moImprBestFitAspirCrit</name>
    <filename>classmo_impr_best_fit_aspir_crit.html</filename>
    <templarg>M</templarg>
    <base>moAspirCrit</base>
    <member kind="typedef">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moImprBestFitAspirCrit</name>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(const M &amp;_move, const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>best_fitness</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>first_time</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moItRandNextMove</name>
    <filename>classmo_it_rand_next_move.html</filename>
    <templarg>M</templarg>
    <base>moNextMove</base>
    <member kind="function">
      <type></type>
      <name>moItRandNextMove</name>
      <anchor>a0</anchor>
      <arglist>(moRandMove&lt; M &gt; &amp;_random_move_generator, unsigned int _iteration_maximum_number)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(M &amp;_move, const EOT &amp;_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moRandMove&lt; M &gt; &amp;</type>
      <name>random_move_generator</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>iteration_maximum_number</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>iteration_number</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moLinearCoolingSchedule</name>
    <filename>classmo_linear_cooling_schedule.html</filename>
    <base>moCoolingSchedule</base>
    <member kind="function">
      <type></type>
      <name>moLinearCoolingSchedule</name>
      <anchor>a0</anchor>
      <arglist>(double _threshold, double _quantity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(double &amp;_current_temperature)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>threshold</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>quantity</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moLSCheckPoint</name>
    <filename>classmo_l_s_check_point.html</filename>
    <templarg>M</templarg>
    <base>eoBF&lt; const M &amp;, const M::EOType &amp;, void &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const M &amp;_move, const typename M::EOType &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a1</anchor>
      <arglist>(eoBF&lt; const M &amp;, const typename M::EOType &amp;, void &gt; &amp;_function)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; eoBF&lt; const M &amp;, const typename M::EOType &amp;, void &gt; * &gt;</type>
      <name>functions</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moMove</name>
    <filename>classmo_move.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; EOT &amp;, void &gt;</base>
    <member kind="typedef">
      <type>EOT</type>
      <name>EOType</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moMoveExpl</name>
    <filename>classmo_move_expl.html</filename>
    <templarg>M</templarg>
    <base>eoBF&lt; const M::EOType &amp;, M::EOType &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>moMoveIncrEval</name>
    <filename>classmo_move_incr_eval.html</filename>
    <templarg>M</templarg>
    <base>eoBF&lt; const M &amp;, const M::EOType &amp;, M::EOType::Fitness &gt;</base>
  </compound>
  <compound kind="class">
    <name>moMoveInit</name>
    <filename>classmo_move_init.html</filename>
    <templarg>M</templarg>
    <base>eoBF&lt; M &amp;, const M::EOType &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>moMoveLoopExpl</name>
    <filename>classmo_move_loop_expl.html</filename>
    <templarg>M</templarg>
    <base>moMoveExpl</base>
  </compound>
  <compound kind="class">
    <name>moMoveSelect</name>
    <filename>classmo_move_select.html</filename>
    <templarg>M</templarg>
    <base>eoBF&lt; M &amp;, M::EOType::Fitness &amp;, void &gt;</base>
    <member kind="typedef">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>(const Fitness &amp;_fitness)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(const M &amp;_move, const Fitness &amp;_fitness)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moNextMove</name>
    <filename>classmo_next_move.html</filename>
    <templarg>M</templarg>
    <base>eoBF&lt; M &amp;, const M::EOType &amp;, bool &gt;</base>
  </compound>
  <compound kind="class">
    <name>moNoAspirCrit</name>
    <filename>classmo_no_aspir_crit.html</filename>
    <templarg>M</templarg>
    <base>moAspirCrit</base>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a0</anchor>
      <arglist>(const M &amp;_move, const typename M::EOType::Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moNoFitImprSolContinue</name>
    <filename>classmo_no_fit_impr_sol_continue.html</filename>
    <templarg>EOT</templarg>
    <base>moSolContinue</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moNoFitImprSolContinue</name>
      <anchor>a0</anchor>
      <arglist>(unsigned int _maxNumberOfIterationWithoutImprovement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>maxNumberOfIterationsWithoutImprovement</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstFitnessSaved</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>fitness</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>counter</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moRandImprSelect</name>
    <filename>classmo_rand_impr_select.html</filename>
    <templarg>M</templarg>
    <base>moMoveSelect</base>
    <member kind="typedef">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>(const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>(const M &amp;_move, const Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(M &amp;_move, Fitness &amp;_fitness)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>initial_fitness</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Fitness &gt;</type>
      <name>better_fitnesses</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; M &gt;</type>
      <name>better_moves</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstTime</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moRandMove</name>
    <filename>classmo_rand_move.html</filename>
    <templarg>M</templarg>
    <base>eoUF&lt; M &amp;, void &gt;</base>
  </compound>
  <compound kind="class">
    <name>moSA</name>
    <filename>classmo_s_a.html</filename>
    <templarg>M</templarg>
    <base>moAlgo&lt; M::EOType &gt;</base>
    <member kind="function">
      <type></type>
      <name>moSA</name>
      <anchor>a0</anchor>
      <arglist>(moRandMove&lt; M &gt; &amp;_random_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moSolContinue&lt; EOT &gt; &amp;_continue, double _initial_temperature, moCoolingSchedule &amp;_cooling_schedule, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(EOT &amp;_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moRandMove&lt; M &gt; &amp;</type>
      <name>random_move_generator</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveIncrEval&lt; M &gt; &amp;</type>
      <name>incremental_evaluation</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moSolContinue&lt; EOT &gt; &amp;</type>
      <name>continu</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>initial_temperature</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moCoolingSchedule &amp;</type>
      <name>cooling_schedule</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>full_evaluation</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moSimpleMoveTabuList</name>
    <filename>classmo_simple_move_tabu_list.html</filename>
    <templarg>M</templarg>
    <base>moTabuList</base>
    <member kind="typedef">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; M &gt;::iterator</type>
      <name>moveIterator</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moSimpleMoveTabuList</name>
      <anchor>a0</anchor>
      <arglist>(unsigned int _memory_maximum_size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const M &amp;_move, const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a2</anchor>
      <arglist>(const M &amp;_move, const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeMove</name>
      <anchor>d0</anchor>
      <arglist>(const M &amp;_move)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>memory_maximum_size</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>memory_size</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; M &gt;</type>
      <name>tabuList</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moSimpleSolutionTabuList</name>
    <filename>classmo_simple_solution_tabu_list.html</filename>
    <templarg>M</templarg>
    <base>moTabuList</base>
    <member kind="typedef">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; EOT &gt;::iterator</type>
      <name>solutionIterator</name>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moSimpleSolutionTabuList</name>
      <anchor>a0</anchor>
      <arglist>(unsigned int _memory_maximum_size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const M &amp;_move, const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchor>a2</anchor>
      <arglist>(const M &amp;_move, const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>removeSolution</name>
      <anchor>d0</anchor>
      <arglist>(const EOT &amp;_solution)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>memory_maximum_size</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>memory_size</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; EOT &gt;</type>
      <name>tabuList</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moSolContinue</name>
    <filename>classmo_sol_continue.html</filename>
    <templarg>EOT</templarg>
    <base>eoUF&lt; const EOT &amp;, bool &gt;</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a0</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moSteadyFitSolContinue</name>
    <filename>classmo_steady_fit_sol_continue.html</filename>
    <templarg>EOT</templarg>
    <base>moSolContinue</base>
    <member kind="typedef">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moSteadyFitSolContinue</name>
      <anchor>a0</anchor>
      <arglist>(unsigned int _maxNumberOfIterations, unsigned int _maxNumberOfIterationWithoutImprovement)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const EOT &amp;_solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>maxNumberOfIterations</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>maxNumberOfIterationsWithoutImprovement</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>maxNumberOfIterationsReached</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>firstFitnessSaved</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fitness</type>
      <name>fitness</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>counter</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moTabuList</name>
    <filename>classmo_tabu_list.html</filename>
    <templarg>M</templarg>
    <base>eoBF&lt; const M &amp;, const M::EOType &amp;, bool &gt;</base>
    <member kind="typedef">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchor>a0</anchor>
      <arglist>(const M &amp;_move, const EOT &amp;_solution)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchor>a2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moTS</name>
    <filename>classmo_t_s.html</filename>
    <templarg>M</templarg>
    <base>moAlgo&lt; M::EOType &gt;</base>
    <member kind="function">
      <type></type>
      <name>moTS</name>
      <anchor>a0</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moTabuList&lt; M &gt; &amp;_tabu_list, moAspirCrit&lt; M &gt; &amp;_aspiration_criterion, moSolContinue&lt; EOT &gt; &amp;_continue, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>moTS</name>
      <anchor>a1</anchor>
      <arglist>(moMoveExpl&lt; M &gt; &amp;_move_explorer, moSolContinue&lt; EOT &gt; &amp;_continue, eoEvalFunc&lt; EOT &gt; &amp;_full_evaluation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchor>a2</anchor>
      <arglist>(EOT &amp;_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>EOT::Fitness</type>
      <name>Fitness</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveExpl&lt; M &gt; &amp;</type>
      <name>move_explorer</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moSolContinue&lt; EOT &gt; &amp;</type>
      <name>continu</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>eoEvalFunc&lt; EOT &gt; &amp;</type>
      <name>full_evaluation</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>moTSMoveLoopExpl</name>
    <filename>classmo_t_s_move_loop_expl.html</filename>
    <templarg>M</templarg>
    <base>moMoveLoopExpl</base>
    <member kind="function">
      <type></type>
      <name>moTSMoveLoopExpl</name>
      <anchor>a0</anchor>
      <arglist>(moMoveInit&lt; M &gt; &amp;_move_initializer, moNextMove&lt; M &gt; &amp;_next_move_generator, moMoveIncrEval&lt; M &gt; &amp;_incremental_evaluation, moTabuList&lt; M &gt; &amp;_tabu_list, moAspirCrit&lt; M &gt; &amp;_aspiration_criterion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchor>a1</anchor>
      <arglist>(const EOT &amp;_old_solution, EOT &amp;_new_solution)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType</type>
      <name>EOT</name>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>M::EOType::Fitness</type>
      <name>Fitness</name>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveInit&lt; M &gt; &amp;</type>
      <name>move_initializer</name>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moNextMove&lt; M &gt; &amp;</type>
      <name>next_move_generator</name>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moMoveIncrEval&lt; M &gt; &amp;</type>
      <name>incremental_evaluation</name>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moBestImprSelect&lt; M &gt;</type>
      <name>move_selection</name>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moTabuList&lt; M &gt; &amp;</type>
      <name>tabu_list</name>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>moAspirCrit&lt; M &gt; &amp;</type>
      <name>aspiration_criterion</name>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
